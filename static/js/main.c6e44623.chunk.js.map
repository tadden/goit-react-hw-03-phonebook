{"version":3,"sources":["Componets/Filter/Filter.module.css","Componets/Container/Container.module.css","Componets/ContactForm/ContactForm.module.css","Componets/ContactList/ContactList.module.css","Componets/Container/Container.js","Componets/ContactForm/ContactForm.js","Componets/ContactList/ContactList.js","Componets/Filter/Filter.js","App.js","index.js"],"names":["module","exports","Container","children","className","s","container","ContactForm","state","name","number","handelChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","form","label","input","type","pattern","title","required","onChange","button","Component","ContactList","contacts","deleteContact","list","map","id","item","onClick","Filter","span","App","filter","addContact","newContact","shortId","generate","find","contact","toLowerCase","alert","contactId","changeFilter","filterContacts","normalizedFilter","trim","includes","savedContacts","JSON","parse","localStorage","getItem","prevProps","prevState","setItem","stringify","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6e44623.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"Filter_span__2O52q\",\"input\":\"Filter_input__lAvG6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2JIsw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__xhKpQ\",\"field\":\"ContactForm_field__3K4bd\",\"label\":\"ContactForm_label__3H55x\",\"input\":\"ContactForm_input__2BDSF\",\"button\":\"ContactForm_button__ZMfNW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1RaJD\",\"item\":\"ContactList_item__3h3HN\",\"name\":\"ContactList_name__10T8O\",\"number\":\"ContactList_number__2hmOn\",\"button\":\"ContactList_button__219K9\"};","import s from './Container.module.css';\n\nfunction Container({children}) {\n    return (<div className={s.container}>{children}</div>)\n};\n\nexport default Container;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n    state = {\n        name: '',\n        number: ''\n    };\n\n    handelChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n    };\n    \n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.onSubmit(this.state);\n        this.reset();\n    };\n\n    reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n   \n\n\n    render() {\n        const { name, number } = this.state;\n\n        return (\n            <form className={s.form} onSubmit={this.handleSubmit}>\n                <label className={s.label}>\n                    Name\n                    <input\n                        className={s.input}\n                        type=\"text\"\n                        name=\"name\"\n                        value={name}\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                        onChange={this.handelChange}\n                    />\n                </label>\n                <label>\n                    Number\n                    <input\n                        className={s.input}\n                        type=\"tel\"\n                        name=\"number\"\n                        value={number}\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                        required\n                        onChange={this.handelChange}\n                    />\n                </label>\n                \n                <button\n                    className={s.button}\n                    type=\"submit\">Add contact</button>\n            </form>\n        );\n    };\n};\n\n\nContactForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n  };\n\nexport default ContactForm;","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n    return (\n        <ul className={s.list}>\n            {contacts.map(({ id, name, number }) => (\n                <li\n                    className={s.item}\n                    key={id}>\n                    <p className={s.name}>{name}</p>\n                    <p className={s.number}>{number}</p>\n                    <button\n                        className={s.button}\n                        type='button'\n                        onClick={() => deleteContact(id)}>Delete\n                    </button>\n                </li>\n            ))}\n        </ul>\n    );\n};\n    \nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.objectOf(PropTypes.string.isRequired).isRequired,\n    ).isRequired,\n    deleteContact: PropTypes.func.isRequired,\n  };\n\nexport default ContactList;","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\n\nfunction Filter ({value, onChange}) {\n    return (\n        <label>\n            <span className ={s.span}>Find contacts by name</span>\n            <input\n                className ={s.input}\n                type=\"text\"\n                name=\"filter\"\n                value={value}\n                onChange={onChange}\n            />\n        </label>\n    );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;","import './App.css';\nimport { Component } from 'react';\nimport Container from 'Componets/Container';\nimport ContactForm from 'Componets/ContactForm';\nimport ContactList from 'Componets/ContactList';\nimport Filter from 'Componets/Filter';\nimport shortId from 'shortid';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: ''\n  };\n\n  componentDidMount() {\n    const savedContacts = JSON.parse(localStorage.getItem('contacts'));\n\n    savedContacts && this.setState({ contacts: savedContacts });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { contacts } = this.state;\n    if (contacts !== prevState) {\n      localStorage.setItem('contacts', JSON.stringify(contacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n\n    const { contacts } = this.state;\n\n    const newContact = {\n      id: shortId.generate(),\n      name: name,\n      number: number,\n    };\n    if (\n      contacts.find(contact => contact.name.toLowerCase() === newContact.name.toLowerCase()) ||\n      contacts.find(contact => contact.number === newContact.number)\n    ) {\n      alert(`${newContact.name} contact is already exists!`);\n      return;\n    }\n\n    this.setState(({ contacts }) => ({\n      contacts: [newContact, ...contacts],\n    }));\n  };\n\n\n  deleteContact = (contactId) => {\n    this.setState(({contacts}) => ({\n      contacts: contacts.filter(contact => contact.id !== contactId)\n    }));\n  };\n    \n    \n  changeFilter = e => {\n    this.setState({filter: e.currentTarget.value})\n  }\n\n  filterContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase().trim();\n    \n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const visibleContacts = this.filterContacts();\n    const { filter } = this.state;\n    return (\n      <Container>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} />\n        <Filter value={filter} onChange={ this.changeFilter}/>\n        <h2>Contacts</h2>\n        <ContactList contacts={visibleContacts} deleteContact={this.deleteContact} />\n      </Container>\n    )\n  };\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}